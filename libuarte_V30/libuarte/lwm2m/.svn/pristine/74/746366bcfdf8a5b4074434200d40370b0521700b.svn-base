/*******************************************************************************
 *
 * Copyright (c) 2013, 2014 Intel Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 *
 * The Eclipse Public License is available at
 *    http://www.eclipse.org/legal/epl-v20.html
 * The Eclipse Distribution License is available at
 *    http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *    David Navarro, Intel Corporation - initial API and implementation
 *    Benjamin Cab√© - Please refer to git log
 *    Fabien Fleutot - Please refer to git log
 *    Simon Bernard - Please refer to git log
 *    Julien Vermillard - Please refer to git log
 *    Axel Lorente - Please refer to git log
 *    Toby Jaffey - Please refer to git log
 *    Bosch Software Innovations GmbH - Please refer to git log
 *    Pascal Rieux - Please refer to git log
 *    Christian Renz - Please refer to git log
 *    Ricky Liu - Please refer to git log
 *
 *******************************************************************************/


#include "lwm2mclient.h"
#include "liblwm2m.h"

#include "vi_lwm2m.h"

#ifdef WITH_TINYDTLS
//#include "../../transport/tinydtls/include/tinydtls/connection.h"
#include "../../transport/tinydtls/include/tinydtls/connection.h"

#else
#include "../../transport/udp/include/udp/connection.h"
#endif

#include <arpa/inet.h>
#include <inttypes.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/select.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

#define MAX_PACKET_SIZE 2048
#define DEFAULT_SERVER_IPV6 "[::1]"
#define DEFAULT_SERVER_IPV4 "127.0.0.1"

int g_reboot = 0;

#define OBJ_COUNT 11
lwm2m_object_t * objArray[OBJ_COUNT];

// only backup security and server objects
# define BACKUP_OBJECT_COUNT 2
lwm2m_object_t * backupObjectArray[BACKUP_OBJECT_COUNT];

#include "qtlwm2mclient.h"
int upd_wakaama(int one,int two, int three, const char *data);

const char *getTs(void)
{
    static char buffer[64];
#ifdef WIN32
    DWORD dwStart = GetTickCount();
#else
    uint32_t dwStart = viPlattformTicks();
#endif
    sprintf(buffer,"%12ld",dwStart);
    return buffer;
}


typedef struct
{
    lwm2m_object_t * securityObjP;
    lwm2m_object_t * serverObject;
    int sock;
#ifdef WITH_TINYDTLS
    lwm2m_dtls_connection_t *connList;
    lwm2m_context_t * lwm2mH;
#else
    lwm2m_connection_t *connList;
#endif
    int addressFamily;
} client_data_t;


void vi_handle_value_changed(lwm2m_context_t * lwm2mH,
                          lwm2m_uri_t * uri,
                          const char * value,
                          size_t valueLength,
                          int internal
                             )
{
    lwm2m_object_t * object = (lwm2m_object_t *)LWM2M_LIST_FIND(lwm2mH->objectList, uri->objectId);

    if (NULL != object)
    {
        if (object->writeFunc != NULL)
        {
            lwm2m_data_t * dataP;
            int result;

            dataP = lwm2m_data_new(1);
            if (dataP == NULL)
            {
                viFailureLog("Internal allocation failure !");
                return;
            }
            dataP->id = uri->resourceId;

#ifndef LWM2M_VERSION_1_0
            if (LWM2M_URI_IS_SET_RESOURCE_INSTANCE(uri))
            {
                lwm2m_data_t *subDataP = lwm2m_data_new(1);
                if (subDataP == NULL)
                {
                    viFailureLog( "Internal allocation failure !");
                    lwm2m_data_free(1, dataP);
                    return;
                }
                subDataP->id = uri->resourceInstanceId;
                lwm2m_data_encode_nstring(value, valueLength, subDataP);
                lwm2m_data_encode_instances(subDataP, 1, dataP);
            }
            else
#endif
            {
                lwm2m_data_encode_nstring(value, valueLength, dataP);
            }

            result = object->writeFunc(lwm2mH, uri->instanceId, 1, dataP, object, LWM2M_WRITE_PARTIAL_UPDATE);
            if (COAP_405_METHOD_NOT_ALLOWED == result)
            {
                switch (uri->objectId)
                {
                case LWM2M_DEVICE_OBJECT_ID:
                    result = device_change(dataP, object);
                    break;
                default:
                    break;
                }
            }

            if (COAP_204_CHANGED != result)
            {
                viFailureLog( "Failed to change value!");
            }
            else
            {
                viFailureLog( "value changed!");
                lwm2m_resource_value_changed(lwm2mH, uri);
            }
            lwm2m_data_free(1, dataP);
            return;
        }
        else
        {
            viFailureLog( "write not supported for specified resource!");
        }
        return;
    }
    else
    {
        viFailureLog( "Object not found !");
    }
}

void handle_value_changed(lwm2m_context_t * lwm2mH,
                          lwm2m_uri_t * uri,
                          const char * value,
                          size_t valueLength)
{
    return vi_handle_value_changed(lwm2mH,uri,value,valueLength,0);  // with access rights check
}


#ifdef WITH_TINYDTLS
void * lwm2m_connect_server(uint16_t secObjInstID,
                            void * userData)
{
  client_data_t * dataP;
  lwm2m_list_t * instance;
  lwm2m_dtls_connection_t *newConnP = NULL;
  dataP = (client_data_t *)userData;
  lwm2m_object_t  * securityObj = dataP->securityObjP;

  instance = LWM2M_LIST_FIND(dataP->securityObjP->instanceList, secObjInstID);
  if (instance == NULL) return NULL;

  newConnP = lwm2m_connection_create(dataP->connList, dataP->sock, securityObj, instance->id, dataP->lwm2mH,
                                     dataP->addressFamily);
  if (newConnP == NULL)
  {
      viFailureLog( "Connection creation failed.");
      return NULL;
  }

  dataP->connList = newConnP;
  return (void *)newConnP;
}
#else
void * lwm2m_connect_server(uint16_t secObjInstID,
                            void * userData)
{
    client_data_t * dataP;
    char * uri;
    char * host;
    char * port;
    lwm2m_connection_t *newConnP = NULL;

    dataP = (client_data_t *)userData;

    uri = get_server_uri(dataP->securityObjP, secObjInstID);

    if (uri == NULL) return NULL;

    // parse uri in the form "coaps://[host]:[port]"
    if (0==strncmp(uri, "coaps://", strlen("coaps://"))) {
        host = uri+strlen("coaps://");
    }
    else if (0==strncmp(uri, "coap://",  strlen("coap://"))) {
        host = uri+strlen("coap://");
    }
    else {
        goto exit;
    }
    port = strrchr(host, ':');
    if (port == NULL) goto exit;
    // remove brackets
    if (host[0] == '[')
    {
        host++;
        if (*(port - 1) == ']')
        {
            *(port - 1) = 0;
        }
        else goto exit;
    }
    // split strings
    *port = 0;
    port++;

    char msg[255];
    sprintf(msg, "Opening connection to server at %s:%s\r\n", host, port);
    viFailureLog(msg);

    newConnP = lwm2m_connection_create(dataP->connList, dataP->sock, host, port, dataP->addressFamily);
    if (newConnP == NULL) {
        viFailureLog( "Connection creation failed.");
    }
    else {
        dataP->connList = newConnP;
    }

exit:
    lwm2m_free(uri);
    return (void *)newConnP;
}
#endif

void lwm2m_close_connection(void * sessionH,
                            void * userData)
{
    client_data_t * app_data;
#ifdef WITH_TINYDTLS
    lwm2m_dtls_connection_t *targetP;
#else
    lwm2m_connection_t *targetP;
#endif

    app_data = (client_data_t *)userData;
#ifdef WITH_TINYDTLS
    targetP = (lwm2m_dtls_connection_t *)sessionH;
#else
    targetP = (lwm2m_connection_t *)sessionH;
#endif

    if (targetP == app_data->connList)
    {
        app_data->connList = targetP->next;
        lwm2m_free(targetP);
    }
    else
    {
#ifdef WITH_TINYDTLS
        lwm2m_dtls_connection_t *parentP;
#else
        lwm2m_connection_t *parentP;
#endif

        parentP = app_data->connList;
        while (parentP != NULL && parentP->next != targetP)
        {
            parentP = parentP->next;
        }
        if (parentP != NULL)
        {
            parentP->next = targetP->next;
            lwm2m_free(targetP);
        }
    }
}


#ifdef XXXXXXXXXXXX

#ifndef LWM2M_VERSION_1_0
static void prv_send(lwm2m_context_t *lwm2mH, char *buffer, void *user_data) {
    lwm2m_uri_t uri;
    lwm2m_uri_t *uris = NULL;
    size_t uriCount = 0;
    char *tmp;
    char *end = NULL;
    int result;
    uint16_t serverId;

    /* unused parameter */
    (void)user_data;

    if (buffer[0] == 0)
        goto syntax_error;

    result = atoi(buffer);
    if (result < 0 || result > LWM2M_MAX_ID)
        goto syntax_error;
    serverId = (uint16_t)result;

    tmp = buffer;
    do {
        tmp = get_next_arg(tmp, &end);
        if (tmp[0] == 0)
            goto syntax_error;

        result = lwm2m_stringToUri(tmp, end - tmp, &uri);
        if (result == 0)
            goto syntax_error;
        uriCount++;
    } while (!check_end_of_args(end));

    uris = lwm2m_malloc(uriCount * sizeof(lwm2m_uri_t));
    if (uris != NULL) {
        size_t i;
        for (i = 0; i < uriCount; i++) {
            buffer = get_next_arg(buffer, &end);
            if (buffer[0] == 0)
                goto syntax_error;

            result = lwm2m_stringToUri(buffer, end - buffer, uris + i);
            if (result == 0)
                goto syntax_error;
        }

        result = lwm2m_send(lwm2mH, serverId, uris, uriCount, NULL, NULL);
        lwm2m_free(uris);
    } else {
        result = COAP_500_INTERNAL_SERVER_ERROR;
    }
    if (result != 0) {
        char msg[255];
        sprintf(msg,"Send error: %d",result);
        viDebugLog(msg);        
    }
    return;

syntax_error:
    if (uris != NULL) {
        lwm2m_free(uris);
    }
    viDebugLog("Syntax error !\n");
}
#endif


#endif

static void update_battery_level(lwm2m_context_t * context)
{
    static time_t next_change_time = 0;
    time_t tv_sec;

    tv_sec = lwm2m_gettime();
    if (tv_sec < 0) return;

    if (next_change_time < tv_sec)
    {
        char value[15];
        int valueLength;
        lwm2m_uri_t uri;
        int level = rand() % 100;

        if (0 > level) level = -level;
        if (lwm2m_stringToUri("/3/0/9", 6, &uri))
        {
            valueLength = sprintf(value, "%d", level);
            char msg[255];
            sprintf(msg,"New Battery Level: %d\n", level);
            viFailureLog( msg);
            handle_value_changed(context, &uri, value, valueLength);
        }
        level = rand() % 20;
        if (0 > level) level = -level;
        next_change_time = tv_sec + level + 10;
    }
}



#ifdef LWM2M_BOOTSTRAP

static void prv_initiate_bootstrap(lwm2m_context_t * lwm2mH,
                                   char * buffer,
                                   void * user_data)
{
    lwm2m_server_t * targetP;

    /* unused parameter */
    (void)user_data;

    // HACK !!!
    lwm2mH->state = STATE_BOOTSTRAP_REQUIRED;
    targetP = lwm2mH->bootstrapServerList;
    while (targetP != NULL)
    {
        targetP->lifetime = 0;
        targetP = targetP->next;
    }
}

static void prv_display_backup(lwm2m_context_t * lwm2mH,
                               char * buffer,
                               void * user_data)
{
   int i;

   /* unused parameters */
   (void)lwm2mH;
   (void)buffer;
   (void)user_data;

   for (i = 0 ; i < BACKUP_OBJECT_COUNT ; i++) {
       lwm2m_object_t * object = backupObjectArray[i];
       if (NULL != object) {
           switch (object->objID)
           {
           case LWM2M_SECURITY_OBJECT_ID:
               display_security_object(object);
               break;
           case LWM2M_SERVER_OBJECT_ID:
               display_server_object(object);
               break;
           default:
               break;
           }
       }
   }
}

static void prv_backup_objects(lwm2m_context_t * context)
{
    uint16_t i;

    for (i = 0; i < BACKUP_OBJECT_COUNT; i++) {
        if (NULL != backupObjectArray[i]) {
            switch (backupObjectArray[i]->objID)
            {
            case LWM2M_SECURITY_OBJECT_ID:
                clean_security_object(backupObjectArray[i]);
                lwm2m_free(backupObjectArray[i]);
                break;
            case LWM2M_SERVER_OBJECT_ID:
                clean_server_object(backupObjectArray[i]);
                lwm2m_free(backupObjectArray[i]);
                break;
            default:
                break;
            }
        }
        backupObjectArray[i] = (lwm2m_object_t *)lwm2m_malloc(sizeof(lwm2m_object_t));
        memset(backupObjectArray[i], 0, sizeof(lwm2m_object_t));
    }

    /*
     * Backup content of objects 0 (security) and 1 (server)
     */
    copy_security_object(backupObjectArray[0], (lwm2m_object_t *)LWM2M_LIST_FIND(context->objectList, LWM2M_SECURITY_OBJECT_ID));
    copy_server_object(backupObjectArray[1], (lwm2m_object_t *)LWM2M_LIST_FIND(context->objectList, LWM2M_SERVER_OBJECT_ID));
}

static void prv_restore_objects(lwm2m_context_t * context)
{
    lwm2m_object_t * targetP;

    /*
     * Restore content  of objects 0 (security) and 1 (server)
     */
    targetP = (lwm2m_object_t *)LWM2M_LIST_FIND(context->objectList, LWM2M_SECURITY_OBJECT_ID);
    // first delete internal content
    clean_security_object(targetP);
    // then restore previous object
    copy_security_object(targetP, backupObjectArray[0]);

    targetP = (lwm2m_object_t *)LWM2M_LIST_FIND(context->objectList, LWM2M_SERVER_OBJECT_ID);
    // first delete internal content
    clean_server_object(targetP);
    // then restore previous object
    copy_server_object(targetP, backupObjectArray[1]);

    // restart the old servers
    viDebugLog( "[BOOTSTRAP] ObjectList restored\r\n");
}

static void update_bootstrap_info(lwm2m_client_state_t * previousBootstrapState,
        lwm2m_context_t * context)
{
    if (*previousBootstrapState != context->state)
    {
        *previousBootstrapState = context->state;
        switch(context->state)
        {
            case STATE_BOOTSTRAPPING:
#if LWM2M_LOG_LEVEL != LWM2M_LOG_DISABLED
                viDebugLog( "[BOOTSTRAP] backup security and server objects\r\n");
#endif
                prv_backup_objects(context);
                break;
            default:
                break;
        }
    }
}

static void close_backup_object(void) {
    int i;
    for (i = 0; i < BACKUP_OBJECT_COUNT; i++) {
        if (NULL != backupObjectArray[i]) {
            switch (backupObjectArray[i]->objID)
            {
            case LWM2M_SECURITY_OBJECT_ID:
                clean_security_object(backupObjectArray[i]);
                lwm2m_free(backupObjectArray[i]);
                break;
            case LWM2M_SERVER_OBJECT_ID:
                clean_server_object(backupObjectArray[i]);
                lwm2m_free(backupObjectArray[i]);
                break;
            default:
                break;
            }
        }
    }
}
#endif

static void prv_display_objects(lwm2m_context_t *lwm2mH, char *buffer, void *user_data) {
    lwm2m_object_t *object;

    /* unused parameter */
    (void)user_data;

    for (object = lwm2mH->objectList; object != NULL; object = object->next) {
        if (NULL != object) {
            switch (object->objID) {
            case LWM2M_SECURITY_OBJECT_ID:
                display_security_object(object);
                break;
            case LWM2M_SERVER_OBJECT_ID:
                display_server_object(object);
                break;
            case LWM2M_ACL_OBJECT_ID:
                break;
            case LWM2M_DEVICE_OBJECT_ID:
                display_device_object(object);
                break;
            case LWM2M_CONN_MONITOR_OBJECT_ID:
                break;
            case LWM2M_FIRMWARE_UPDATE_OBJECT_ID:
                display_firmware_object(object);
                break;
            case LWM2M_LOCATION_OBJECT_ID:
                display_location_object(object);
                break;
            case LWM2M_CONN_STATS_OBJECT_ID:
                break;
            case TEST_OBJECT_ID:
                display_test_object(object);
                break;
            default:
                {
                char msg[64];
                sprintf(msg, "unknown object ID: %" PRIu16 "\n", object->objID);
                viDebugLog(msg);
                }
                break;
            }
        }
    }
}

void print_usage(void)
{
}


MY_TYPE g_LwM2M;



int doNextStepInt(lwm2m_context_t * lwm2mH)
{



/*
         * This function does two things:
         *  - first it does the work needed by liblwm2m (eg. (re)sending some packets).
         *  - Secondly it adjusts the timeout value (default 60s) depending on the state of the transaction
         *    (eg. retransmission) and the time between the next operation
         */
int result = lwm2m_step(lwm2mH, &(g_LwM2M.myTv));

char msg[64];
char *sname = 0;


switch (lwm2mH->state)
{
case STATE_INITIAL:
    sname="STATE_INITIAL";
    break;
case STATE_BOOTSTRAP_REQUIRED:
    sname= "STATE_BOOTSTRAP_REQUIRED";
    break;
case STATE_BOOTSTRAPPING:
    sname= "STATE_BOOTSTRAPPING";
    break;
case STATE_REGISTER_REQUIRED:
    sname= "STATE_REGISTER_REQUIRED";
    break;
case STATE_REGISTERING:
    sname= "STATE_REGISTERING";
    break;
case STATE_READY:
    sname= "STATE_READY";
    break;
default:
    sname= "Unknown...";
    break;
}

sprintf(msg, "%s LWm2m-State: %s" , getTs(),sname );
viDebugLog(msg);


if (result != 0)
{
   char msg[64];
   sprintf(msg,  "lwm2m_step() failed: 0x%X\r\n", result);
   viFailureLog(msg);

#ifdef LWM2M_BOOTSTRAP
    if(g_LwM2M.previousState == STATE_BOOTSTRAPPING)
    {
#ifdef LWM2M_WITH_LOGS
       viDebugLog( "[BOOTSTRAP] restore security and server objects\r\n");
#endif
        prv_restore_objects(lwm2mH);
        lwm2mH->state = STATE_INITIAL;
    } else
#endif
        return -1;
}
#ifdef LWM2M_BOOTSTRAP
update_bootstrap_info(&g_LwM2M.previousState, lwm2mH);
#endif
}

void doNextStep(void) {
    char msg[64];
    sprintf(msg,"%s doNextStep", getTs() );
    viDebugLog(msg);
    doNextStepInt(g_LwM2M.lwm2mH);
}


client_data_t data;


int myClientInit(void)
{
// tcpdump -n udp port 7685
    g_LwM2M.lwm2mH = NULL;

   //coaps://lwm2m.mudip.com:7685 urn:imei:866901063238648 with 000102030405060708090a0b0c0d0e49


    g_LwM2M.server = "lwm2m.mudip.com";

#ifdef MU_DTLS
    g_LwM2M.serverPort = "7685"; // LW DTLS port
#else
    g_LwM2M.serverPort = "5683"; // LW NO DTLS
#endif
    g_LwM2M.myTv =  60;  // What initial
    #ifdef MU_DTLS
    g_LwM2M.name = "urn:imei:866901063238648";  // "TEST001";   see NO_FAKE_UDS
    #else
    g_LwM2M.name = "urn:imei:866901063238649";
    #endif

#ifdef DT_COT
    // only DTLS
    g_LwM2M.name = "urn:imei:864486061884090";

    // WORKING: wakaama
    //Tested OK with BS 09.01.2025
    //java -jar leshan-client-demo.jar -b -u coaps://lwm2m.test-ram.m2m.telekom.com:5684 -v -n urn:imei:864486061884090 -i urn:imei:864486061884090 -p 660102030405060708090a0b0c0d0e90
    //Direct
    //java -jar leshan-client-demo.jar -u coaps://lwm2m.test-ram.m2m.telekom.com:5784 -v -n urn:imei:864486061884090 -i urn:imei:864486061884090 -p 000102030405060708090a0b0c0d0e91
    // with IP
    //java -jar leshan-client-demo.jar -u coaps://51.116.97.195:5784 -v -n urn:imei:864486061884090 -i urn:imei:864486061884090 -p 000102030405060708090a0b0c0d0e91


    g_LwM2M.server = "lwm2m.test-ram.m2m.telekom.com";
    g_LwM2M.serverPort = "5784";  // DTLS Diret

    #define PSK "000102030405060708090a0b0c0d0e91"

    //g_LwM2M.serverPort = "5684";  // BS
#else
     // VI SERVER

    // VI OK 06.02.2025 -> DTLS
    // java -jar leshan-client-demo.jar -u coaps://168.119.70.243:7685 -v -n urn:imei:864486061884090 -i urn:imei:864486061884090 -p 000102030405060708090a0b0c0d0e90




#define PSK "000102030405060708090a0b0c0d0e90"
#endif

// test mit command line
//    ./lwm2mclient_tinydtls -4 -h lwm2m.mudip.com -p 7685 -n urn:imei:866901063238648 -i urn:imei:866901063238648 -s 000102030405060708090a0b0c0d0e49

}

int main_wakaama(void)
{
    int result;

    int lifetime = 300;
    int batterylevelchanging = 0;
    time_t reboot_time = 0;

    bool bootstrapRequested = false;
    bool serverPortChanged = false;

#ifdef LWM2M_BOOTSTRAP
    lwm2m_client_state_t previousState = STATE_INITIAL;
#endif

#ifdef MU_DTLS
    g_LwM2M.p_pskId = g_LwM2M.name; // same as the name? "urn:imei:866901063238648";

    char *psk = PSK;
    char msg[64];
    sprintf(msg, "PSK: %s with ID: %s\r\n",psk,g_LwM2M.p_pskId);
    viFailureLog(msg);

    g_LwM2M.pskLen = strlen(psk)/2;   // Must be hex len / by two!

  //  g_LwM2M.psk
    g_LwM2M.psk = malloc(g_LwM2M.pskLen);
    bootstrapRequested = true;

    if (NULL == g_LwM2M.psk)
    {
    viFailureLog( "Failed to create PSK binary buffer");
    return -1;
    }
    // Hex string to binary
    char *h = psk;
    char *b = g_LwM2M.psk;
    char xlate[] = "0123456789ABCDEF";

    for ( ; *h; h += 2, ++b)
    {
    char *l = strchr(xlate, toupper(*h));
    char *r = strchr(xlate, toupper(*(h+1)));

    if (!r || !l)
    {
        viFailureLog( "Failed to parse Pre-Shared-Key HEXSTRING");
        return -1;
    }

    *b = ((l - xlate) << 4) + (r - xlate);
    }






#else
    g_LwM2M.p_pskId = 0;
    #ifdef WITH_TINYDTLS
    g_LwM2M.psk = "";
    #endif
    g_LwM2M.pskLen = 0;
#endif
  //  char * pskBuffer = NULL;

    memset(&data, 0, sizeof(client_data_t));
    data.addressFamily = AF_INET;  //AF_INET6;

    char serverUri[50];
    int serverId = 123;
#ifdef WITH_TINYDTLS
    sprintf (serverUri, "coaps://%s:%s", g_LwM2M.server, g_LwM2M.serverPort);
#else
    sprintf (serverUri, "coap://%s:%s", g_LwM2M.server, g_LwM2M.serverPort);
#endif
#ifdef LWM2M_BOOTSTRAP
    objArray[0] = get_security_object(serverId, serverUri, g_LwM2M.p_pskId, g_LwM2M.psk, g_LwM2M.pskLen, bootstrapRequested);
#else
    objArray[0] = get_security_object(serverId, serverUri, g_LwM2M.p_pskId, g_LwM2M.psk, g_LwM2M.pskLen, false);
#endif
    if (NULL == objArray[0])
    {
        viFailureLog( "Failed to create security object");
        return -1;
    }
    data.securityObjP = objArray[0];

    objArray[1] = get_server_object(serverId, "U", lifetime, false);
    if (NULL == objArray[1])
    {
        viFailureLog( "Failed to create server object");
        return -1;
    }

    objArray[2] = get_object_device();
    if (NULL == objArray[2])
    {
        viFailureLog( "Failed to create Device object");
        return -1;
    }

    objArray[3] = get_object_firmware();
    if (NULL == objArray[3])
    {
        viFailureLog( "Failed to create Firmware object");
        return -1;
    }

    objArray[4] = get_object_location();
    if (NULL == objArray[4])
    {
        viFailureLog( "Failed to create location object");
        return -1;
    }

    objArray[5] = get_test_object();
    if (NULL == objArray[5])
    {
        viFailureLog( "Failed to create test object");
        return -1;
    }

    objArray[6] = get_object_conn_m();
    if (NULL == objArray[6])
    {
        viFailureLog( "Failed to create connectivity monitoring object");
        return -1;
    }

    objArray[7] = get_object_conn_s();
    if (NULL == objArray[7])
    {
        viFailureLog( "Failed to create connectivity statistics object");
        return -1;
    }

    int instId = 0;
    objArray[8] = acc_ctrl_create_object();
    if (NULL == objArray[8])
    {
        viFailureLog( "Failed to create Access Control object");
        return -1;
    }
    else if (acc_ctrl_obj_add_inst(objArray[8], instId, 3, 0, serverId)==false)
    {
        viFailureLog( "Failed to create Access Control object instance");
        return -1;
    }
    else if (acc_ctrl_oi_add_ac_val(objArray[8], instId, 0, 0xF /* == 0b000000000001111 */)==false)
    {
        viFailureLog( "Failed to create Access Control ACL default resource");
        return -1;
    }
    else if (acc_ctrl_oi_add_ac_val(objArray[8], instId, 999, 0x1 /* == 0b000000000000001 */)==false)
    {
        viFailureLog( "Failed to create Access Control ACL resource for serverId: 999");
        return -1;
    }

    objArray[9] = get_object_temperaturen();
    if (NULL == objArray[9])
    {
        viFailureLog( "Failed to create temperatur statistics object");
        return -1;
    }

    objArray[10] = get_object_binary();
//   objArray[10] = get_object_temperaturen();
    if (NULL == objArray[10])
    {
        viFailureLog( "Failed to create binary statistics object");
        return -1;
    }

    /*
     * The liblwm2m library is now initialized with the functions that will be in
     * charge of communication
     */
    g_LwM2M.lwm2mH = lwm2m_init(&data);
    if (NULL == g_LwM2M.lwm2mH)
    {
        viFailureLog( "lwm2m_init() failed");
        return -1;
    }
#ifdef WITH_TINYDTLS
    data.lwm2mH = g_LwM2M.lwm2mH;
#endif

    /*
     * We configure the liblwm2m library with the name of the client - which shall be unique for each client -
     * the number of objects we will be passing through and the objects array
     */
    result = lwm2m_configure(g_LwM2M.lwm2mH, g_LwM2M.name, NULL, NULL, OBJ_COUNT, objArray);
    if (result != 0)
    {
      char msg[64];
        sprintf(msg, "lwm2m_configure() failed: 0x%X\r\n", result);
        viFailureLog(msg);
        return -1;
    }

    /**
     * Initialize value changed callback.
     */
    init_value_change(g_LwM2M.lwm2mH);


    //data.lwm2mH = lwm2mH;
    g_LwM2M.myTv =  60;        // we received ... now 60 sec more


    doNextStep(); // g_LwM2M.lwm2mH);



    return 0;

#ifdef NO_FAKE_UDS
    /*
     * We now enter in a while loop that will handle the communications from the server
     */
    while (0 == g_quit)
    {
        struct timeval tv;
        fd_set readfds;

        if (g_reboot)
        {
            time_t tv_sec;

            tv_sec = lwm2m_gettime();

            if (0 == reboot_time)
            {
                reboot_time = tv_sec + 5;
            }
            if (reboot_time < tv_sec)
            {
                /*
                 * Message should normally be lost with reboot ...
                 */
                viFailureLog( "reboot time expired, rebooting ...");
                system_reboot();
            }
            else
            {
                tv.tv_sec = reboot_time - tv_sec;
            }
        }
        else if (batterylevelchanging)
        {
            update_battery_level(g_LwM2M.lwm2mH);
            tv.tv_sec = 5;
        }
        else
        {
            tv.tv_sec = 60;
        }
        tv.tv_usec = 0;
/*
        FD_ZERO(&readfds);
        FD_SET(data.sock, &readfds);
        FD_SET(STDIN_FILENO, &readfds);
*/
        xxxx(g_LwM2M.lwm2mH);



        /*
         * This part will set up an interruption until an event happen on SDTIN or the socket until "tv" timed out (set
         * with the precedent function)
         */
        result = select(FD_SETSIZE, &readfds, NULL, NULL, &tv);

        if (result < 0)
        {
            if (errno != EINTR)
            {
              viFailureLog( "Error in select(): %d %s", errno, strerror(errno));
            }
        }
        else if (result > 0)
        {
            uint8_t buffer[MAX_PACKET_SIZE];
            ssize_t numBytes;

            /*
             * If an event happens on the socket
             */
            if (FD_ISSET(data.sock, &readfds))
            {
                struct sockaddr_storage addr;
                socklen_t addrLen;

                addrLen = sizeof(addr);

                /*
                 * We retrieve the data received
                 */
                numBytes = recvfrom(data.sock, buffer, MAX_PACKET_SIZE, 0, (struct sockaddr *)&addr, &addrLen);

                if (0 > numBytes)
                {
                    viFailureLog( "Error in recvfrom(): %d %s", errno, strerror(errno));
                }
                else if (numBytes >= MAX_PACKET_SIZE) 
                {
                    viFailureLog( "Received packet >= MAX_PACKET_SIZE");
                } 
                else if (0 < numBytes)
                {
                    char s[INET6_ADDRSTRLEN];
                    in_port_t port;

#ifdef WITH_TINYDTLS
                    lwm2m_dtls_connection_t *connP;
#else
                    lwm2m_connection_t *connP;
#endif
                    if (AF_INET == addr.ss_family)
                    {
                        struct sockaddr_in *saddr = (struct sockaddr_in *)&addr;
                        inet_ntop(saddr->sin_family, &saddr->sin_addr, s, INET6_ADDRSTRLEN);
                        port = saddr->sin_port;
                    }
                    else if (AF_INET6 == addr.ss_family)
                    {
                        struct sockaddr_in6 *saddr = (struct sockaddr_in6 *)&addr;
                        inet_ntop(saddr->sin6_family, &saddr->sin6_addr, s, INET6_ADDRSTRLEN);
                        port = saddr->sin6_port;
                    }
                    viFailureLog( "%zd bytes received from [%s]:%hu\r\n", numBytes, s, ntohs(port));

                    /*
                     * Display it in the error
                     */
                    viFailureLog( buffer, (size_t)numBytes, 0);

                    connP = lwm2m_connection_find(data.connList, &addr, addrLen);
                    if (connP != NULL)
                    {
                        /*
                         * Let liblwm2m respond to the query depending on the context
                         */
#ifdef WITH_TINYDTLS
                        result = lwm2m_connection_handle_packet(connP, buffer, numBytes);
                        if (0 != result)
                        {
                             printf("error handling message %d\n",result);
                        }
#else
                        lwm2m_handle_packet(lwm2mH, buffer, (size_t)numBytes, connP);
#endif
                        conn_s_updateRxStatistic(objArray[7], numBytes, false);
                    }
                    else
                    {
                        viFailureLog( "received bytes ignored!\r\n");
                    }
                }
            }

            /*
             * If the event happened on the SDTIN
             */
            else if (FD_ISSET(STDIN_FILENO, &readfds))
            {
                char *line = NULL;
                size_t bufLen = 0;

                numBytes = getline(&line, &bufLen, stdin);

                if (numBytes > 1)
                {
                    line[numBytes] = 0;
                    /*
                     * We call the corresponding callback of the typed command passing it the buffer for further arguments
                     */
                    handle_command(lwm2mH, commands, line);
                }
                if (g_quit == 0)
                {
                    fprintf(stdxout, "\r\n> ");
                    fflush(stdxout);
                }
                else
                {
                    fprintf(stdxout, "\r\n");
                }

                lwm2m_free(line);
            }
        }
    }

    /*
     * Finally when the loop is left smoothly - asked by user in the command line interface - we unregister our client from it
     */
    if (g_quit == 1)
    {
#ifdef WITH_TINYDTLS
      //  free(pskBuffer);
#endif

#ifdef LWM2M_BOOTSTRAP
        close_backup_object();
#endif
        lwm2m_close(g_LwM2M.lwm2mH);
    }
    close(data.sock);
    lwm2m_connection_free(data.connList);

    clean_security_object(objArray[0]);
    lwm2m_free(objArray[0]);
    clean_server_object(objArray[1]);
    lwm2m_free(objArray[1]);
    free_object_device(objArray[2]);
    free_object_firmware(objArray[3]);
    free_object_location(objArray[4]);
    free_test_object(objArray[5]);
    free_object_conn_m(objArray[6]);
    free_object_conn_s(objArray[7]);
    acl_ctrl_free_object(objArray[8]);
    free_test_object(objArray[9]);
    return 0;
#endif

}

void xxx_onUdsReceive(uint8_t *b, int len)
{
#ifdef MU_DTLS
    lwm2m_dtls_connection_t * newConnP = data.connList;

    int result = lwm2m_connection_handle_packet(newConnP, b, len);
    if (0 != result)
    {
        printf("error handling message %d\n",result);
    } else {
        // no error check for new DTLS connect.

    }

#else

    lwm2m_context_t *contextP=g_LwM2M.lwm2mH;
    uint8_t *buffer=b;
    size_t length = len;
    void *fromSessionH = (void*)g_LwM2M.lwm2mH;

    lwm2m_handle_packet(contextP, buffer, length, fromSessionH);


    /*
     * Let liblwm2m respond to the query depending on the context
     */
    //lwm2m_handle_packet(lwm2mH, buffer, (size_t)numBytes, connP);

#endif
   // xxxx(data.lwm2mH);
}

int upd_wakaama(int one,int two, int three, const char *data)
{

    lwm2m_uri_t uri;
    char surl[1024];
    sprintf(surl,"/%d/%d/%d", one, two, three);
    int slen = strlen(surl);
    if (lwm2m_stringToUri(surl, slen, &uri)) {
        int valueLength = strlen(data);
        char msg[255];
        sprintf(msg, "%s upd_wakaama %s:[%s]\n", getTs(), surl,data);
        viFailureLog(msg);

        vi_handle_value_changed(g_LwM2M.lwm2mH, &uri, data, valueLength,1);

        lwm2m_resource_value_changed(g_LwM2M.lwm2mH, &uri);
        doNextStep();       // must trigger the notification

    }
}

extern int gViDtlsConencted;
void lwm2m_oneSec(void) {

    //viFailureLog( "%s lwm2m_oneSec \n", getTs() );
    //doNextStep();       // must trigger the notification

    if (gViDtlsConencted > 0) {
        gViDtlsConencted--;

        if (gViDtlsConencted == 0) {
            const char * bin = "0.0";      // !!!MZA??? wirte a dummy ... if not not connected?
            upd_wakaama(3303,0,5700,bin);

        }

    }
}







